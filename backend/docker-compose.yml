services:
  postgres:
    container_name: postgres
    build:
      context: ./services/postgres
      dockerfile: Dockerfile
    # restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 10s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file: ./.env
    networks:
      - hapi_fhir_network

  redis:
    container_name: redis
    build:
      context: ./services/redis
      dockerfile: Dockerfile
    command: --save 60 1 --loglevel warning
    # restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 10s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - cache:/data
    networks:
      - hapi_fhir_network

  keycloak:
    container_name: keycloak
    build:
      context: ./services/keycloak
      dockerfile: Dockerfile
    # restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/keycloak/health-check.sh"]
      start_period: 10s
      interval: 30s
      retries: 5
      timeout: 5s

    # 'start-dev',
    # 'start',
    # '-Dauto-build',
    # '--log-level=INFO,io.vertx.ext.web.impl.RouterImpl:TRACE',

    # '-Dkeycloak.migration.action=import',
    # '-Dkeycloak.migration.provider=singleFile',
    # '-Dkeycloak.migration.realmName=hapi-fhir-dev',
    # '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING',
    # '-Dkeycloak.migration.file=/import/development-realm.json',

    command:
      [
        'start',
        # '-Dkeycloak.migration.action=import',
        # '-Dkeycloak.migration.provider=singleFile',
        # '-Dkeycloak.migration.realmName=hapi-fhir-dev',
        # '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING',
        # '-Dkeycloak.migration.file=/import/development-realm.json',
        '--log-level=INFO,io.vertx.ext.web.impl.RouterImpl:TRACE',
      ]

    environment:

      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}

      KC_HTTPS_CERTIFICATE_FILE: /etc/keycloak/certs/cert.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/keycloak/certs/key.pem

      KC_PROXY_HEADERS: forwarded

      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN:-admin}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-secret}

      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}

      KC_HEALTH_ENABLED: true

    env_file: ./.env
    ports:
      - 8443:8443
      - 9000:9000

    # Make sure the certificate and the key (the *.pem files) have the correct permissions -> e.g., sudo chmod 655 *.pem
    volumes:
      - '${PWD}/services/keycloak/scripts/health-check.sh:/opt/keycloak/health-check.sh'
      - '${PWD}/certs/keycloak-cert.pem:/etc/keycloak/certs/cert.pem'
      - '${PWD}/certs/keycloak-key.pem:/etc/keycloak/certs/key.pem'
      - '${PWD}/certs:/opt/keycloak/conf/truststores'
      - '${PWD}:/import'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hapi_fhir_network

  oauth2-proxy:
    container_name: oauth2-proxy
    build:
      context: ./services/oauth2-proxy
      dockerfile: Dockerfile
    # restart: unless-stopped
    # '--skip-auth-preflight=true',
    command:
      [
        '--standard-logging=true',
        '--auth-logging=true',
        '--request-logging=true',
      ]
    environment:

      # https://oauth2-proxy.github.io/oauth2-proxy/configuration/overview

      # General Provider options
      OAUTH2_PROXY_CLIENT_ID: ${CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${CLIENT_SECRET}
      OAUTH2_PROXY_CODE_CHALLENGE_METHOD: S256
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: true
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${PROTOCOL}://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_PORT}/realms/${KEYCLOAK_REALM}
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: OpenID Connect
      OAUTH2_PROXY_SCOPE: ${SCOPE}

      # Cookie Options
      OAUTH2_PROXY_COOKIE_CSRF_PER_REQUEST: true
      OAUTH2_PROXY_COOKIE_EXPIRE: 30m
      OAUTH2_PROXY_COOKIE_HTTPONLY: true
      OAUTH2_PROXY_COOKIE_NAME: ${COOKIE_NAME}
      OAUTH2_PROXY_COOKIE_REFRESH: 25m
      OAUTH2_PROXY_COOKIE_SAMESITE: lax
      OAUTH2_PROXY_COOKIE_SECRET: ${COOKIE_SECRET}
      OAUTH2_PROXY_COOKIE_SECURE: true

      # Header options
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: true
      OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: true
      OAUTH2_PROXY_PROXY_HEADERS: xforwarded
      OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: true
      OAUTH2_PROXY_SET_XAUTHREQUEST: true

      # Logging options
      OAUTH2_PROXY_ERRORS_TO_INFO_LOG: true
      OAUTH2_PROXY_REQUEST_LOGGING: true
      OAUTH2_PROXY_SILENCE_PING_LOGGING: true

      # Page Template options
      OAUTH2_PROXY_SHOW_DEBUG_ON_ERROR: true

      # Proxy options
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'
      OAUTH2_PROXY_REDIRECT_URL: ${PROTOCOL}://${OAUTH2_PROXY_HOSTNAME}/oauth2/callback
      OAUTH2_PROXY_REVERSE_PROXY: true
      # See: https://github.com/oauth2-proxy/oauth2-proxy/issues/809
      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: true
      # OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: true
      OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY: true
      OAUTH2_PROXY_WHITELIST_DOMAINS: ${OAUTH2_PROXY_HOSTNAME}:${OAUTH2_PROXY_PORT}

      # Server options
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:${OAUTH2_PROXY_PORT}

      # Session options
      OAUTH2_PROXY_REDIS_CONNECTION_URL: redis://redis
      OAUTH2_PROXY_SESSION_STORE_TYPE: redis

      # Upstreams configuration
      OAUTH2_PROXY_SSL_UPSTREAM_INSECURE_SKIP_VERIFY: true
      OAUTH2_PROXY_UPSTREAMS: http://vps-13d3e726.vps.ovh.net:8080

    env_file: ./.env
    ports:
      - 4180:4180
    depends_on:
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - hapi_fhir_network

  nginx:
    container_name: nginx
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    # restart: unless-stopped
    volumes:
      - '${PWD}/services/nginx/conf/ssl.conf:/etc/nginx/conf/ssl.conf'
      - '${PWD}/services/nginx/conf/nginx-default.conf.template:/etc/nginx/templates/default.conf.template'
      - '${PWD}/certs:/etc/nginx/certs'
    ports:
      - 8080:8080
      - 443:443
    depends_on:
      - oauth2-proxy
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - hapi_fhir_network

  hapi-fhir:
    container_name: hapi-fhir
    build:
      context: ./services/hapi-fhir
      dockerfile: Dockerfile
    # restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-hapi-fhir}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-admin}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      SPRING_DATASOURCE_DRIVERCLASSNAME: 'org.postgresql.Driver'
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: 'ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgresDialect'
    env_file: ./.env
    expose:
      - 8080
    configs:
      - source: hapi
        target: /app/config/application.yaml
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - hapi_fhir_network

networks:
  hapi_fhir_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  cache:
    driver: local

configs:
  hapi:
    file: ./hapi.application.yaml
    # file: ./hapi.application-fhir-au-core-1.0.0-preview.yaml

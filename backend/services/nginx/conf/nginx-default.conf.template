upstream hapi-fhir {server 51.77.220.2:8080;}
upstream oauth2-proxy {server 51.77.220.2:4180;}
upstream keycloak {server 51.77.220.2:8443;}

server {
  listen 80;
  server_name vps-13d3e726.vps.ovh.net;
  include /etc/nginx/conf/ssl.conf;

  return 301 https://$host$request_uri;
}

server {
  server_name vps-13d3e726.vps.ovh.net;
  listen 443 ssl default_server;
  include /etc/nginx/conf/ssl.conf;

  location /private/ {
    auth_request           /oauth2/auth;
    auth_request_set       $auth_status            $upstream_status;
  }

  location /oauth2/ {
    proxy_pass             http://oauth2-proxy;
    proxy_set_header       Host                    $host;
    proxy_set_header       X-Real-IP               $remote_addr;
    proxy_set_header       X-Auth-Request-Redirect $request_uri;
  }

  location = /oauth2/auth {
    internal;

    # Proxy for AuthN server
    proxy_pass              http://oauth2-proxy;

    # Add fail timeout and max fails to handle connection refused errors
    proxy_connect_timeout   5s;
    proxy_read_timeout      5s;
    proxy_send_timeout      5s;
    proxy_next_upstream     error timeout http_502;

    proxy_pass_request_body off;
    proxy_set_header        Content-Length         "";

    proxy_set_header        X-Forwarded-Uri        $request_uri;

    proxy_set_header        Host                   $host;
    proxy_set_header        X-Real-IP              $remote_addr;

    # Add error handling for auth failures
    error_page 502 = @oauth2_down;
  }

  # Fallback when oauth2-proxy is down
  location @oauth2_down {
    return 200; # Allow access when oauth2-proxy is down
    # Alternatively you could return 401 to force authentication when service is back
  }

  location /fhir {
    proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Host   $host;
    proxy_set_header  X-Forwarded-Server $host;
    proxy_set_header  X-Forwarded-Port   $server_port;
    proxy_set_header  X-Forwarded-Proto  $scheme;
    proxy_set_header  Host               $host;
    proxy_set_header  X-Real-IP          $remote_addr;

    proxy_pass http://hapi-fhir;
  }

  location / {
    auth_request /oauth2/auth;
    error_page 401 =403 /oauth2/sign_in;

    # To provide support for API client's enable the '--skip-jwt-bearer-tokens' option which will then allow requests
    # with a valid 'Authorization: Bearer <token>' header to pass through the proxy as normal.
    # See: https://github.com/oauth2-proxy/oauth2-proxy/issues/809
    if ($http_authorization = "") {
      error_page 401 = /oauth2/start;
    }

    # Pass information via X-User and X-Email headers to backend, requires running with --set-xauthrequest flag
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;

    # If you enabled --pass-access-token, this will pass the token to the backend
    auth_request_set $token  $upstream_http_x_auth_request_access_token;
    proxy_set_header X-Access-Token $token;

    # If you enabled --cookie-refresh, this is needed for it to work with auth_request
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;

    # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
    # limit and so the OAuth2 Proxy splits these into multiple parts.
    # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
    # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
    auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

    # Extract the Cookie attributes from the first Set-Cookie header and append them
    # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
    if ($auth_cookie ~* "(; .*)") {
        set $auth_cookie_name_0 $auth_cookie;
        set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
    }

    # Send both Set-Cookie headers now if there was a second part
    if ($auth_cookie_name_upstream_1) {
        add_header Set-Cookie $auth_cookie_name_0;
        add_header Set-Cookie $auth_cookie_name_1;
    }

    proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Host   $host;
    proxy_set_header  X-Forwarded-Server $host;
    proxy_set_header  X-Forwarded-Port   $server_port;
    proxy_set_header  X-Forwarded-Proto  $scheme;

    proxy_pass http://hapi-fhir;
  }

  location = /oauth2/sign_out {
    if ($request_method != POST) {
        return 405;
    }

    # Proxy for AuthN server
    proxy_pass              http://oauth2-proxy;

    proxy_set_header        Host                   $host;
    proxy_set_header        X-Real-IP              $remote_addr;
  }

}

server {
  server_name vps-13d3e726.vps.ovh.net;
  listen 443 ssl;
  include /etc/nginx/conf/ssl.conf;

  location /keycloak/ {
    proxy_pass        http://keycloak;
    proxy_set_header  Host               $host;
    proxy_set_header  X-Real-IP          $remote_addr;
    proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Host   $host;
    proxy_set_header  X-Forwarded-Server $host;
    proxy_set_header  X-Forwarded-Port   $server_port;
    proxy_set_header  X-Forwarded-Proto  $scheme;
  }

  location /keycloak/auth/ {
    proxy_pass        http://keycloak/keycloak/auth/;
    proxy_set_header  Host               $host;
    proxy_set_header  X-Real-IP          $remote_addr;
    proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Host   $host;
    proxy_set_header  X-Forwarded-Server $host;
    proxy_set_header  X-Forwarded-Port   $server_port;
    proxy_set_header  X-Forwarded-Proto  $scheme;
  }
}

  # location / {
  #   proxy_set_header  Host               $host;
  #   proxy_set_header  X-Real-IP          $remote_addr;
  #   proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
  #   proxy_set_header  X-Forwarded-Host   $host:443;
  #   proxy_set_header  X-Forwarded-Server $host;
  #   proxy_set_header  X-Forwarded-Port   443;
  #   proxy_set_header  X-Forwarded-Proto  https;
  #   proxy_pass        http://hapi-fhir:8080/;
  # }

# https://docs.nginx.com/nginx/admin-guide/security-controls/terminating-ssl-http/
# https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication
# https://github.com/deskoh/nginx-oauth2-proxy-demo/blob/master/nginx/nginx.conf
# https://oauth2-proxy.github.io/oauth2-proxy/configuration/integration
